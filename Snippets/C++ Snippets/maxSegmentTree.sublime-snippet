<snippet>
	<content><![CDATA[

class SegmentTree {
private:
    vector<int> tree;
    vector<int> arr;
    int n;

    int build(int node, int start, int end) {
        if (start == end) {
            tree[node] = arr[start];
            return tree[node];
        }

        int mid = (start + end) / 2;
        int leftMax = build(2 * node + 1, start, mid);
        int rightMax = build(2 * node + 2, mid + 1, end);

        tree[node] = max(leftMax, rightMax);
        return tree[node];
    }

    int query(int node, int start, int end, int left, int right) {
        if (left <= start && right >= end) {
            return tree[node]; 
        }

        if (right < start || left > end) {
            return INT_MIN; 
        }

        int mid = (start + end) / 2;
        int leftMax = query(2 * node + 1, start, mid, left, right);
        int rightMax = query(2 * node + 2, mid + 1, end, left, right);

        return max(leftMax, rightMax);
    }

public:
    SegmentTree(const vector<int>& input) {
        arr = input;
        n = input.size();
        tree.resize(4 * n);
        build(0, 0, n - 1); 
    }

    int getMax(int left, int right) {
        if (left < 0 || right >= n || left > right) {
            return INT_MIN; 
        }
        return query(0, 0, n - 1, left, right);
    }
};

]]></content>
	<!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
	<tabTrigger>_maxSegmentTree</tabTrigger>
	<!-- Optional: Set a scope to limit where the snippet will trigger -->
	<!-- <scope>source.python</scope> -->
</snippet>
