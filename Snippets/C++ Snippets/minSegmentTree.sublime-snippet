<snippet>
	<content><![CDATA[
class SegmentTree {
private:
    int n; 
    vector<int> tree;

    void build(const vector<int>& nums, int node, int left, int right) {
        if (left == right) {
            tree[node] = nums[left];
            return;
        }

        int mid = left + (right - left) / 2;
        build(nums, 2 * node + 1, left, mid);
        build(nums, 2 * node + 2, mid + 1, right);
        tree[node] = min(tree[2 * node + 1], tree[2 * node + 2]);
    }

    int query(int node, int left, int right, int qLeft, int qRight) {
        if (qLeft > right || qRight < left) {
            return INT_MAX; 
        }

        if (qLeft <= left && qRight >= right) {
            return tree[node]; 
        }

        int mid = left + (right - left) / 2;
        int leftMin = query(2 * node + 1, left, mid, qLeft, qRight);
        int rightMin = query(2 * node + 2, mid + 1, right, qLeft, qRight);
        return min(leftMin, rightMin);
    }

public:
    SegmentTree(const vector<int>& nums) {
        n = nums.size();
        tree.resize(4 * n, 0); 
        build(nums, 0, 0, n - 1);
    }

    int rangeMinQuery(int left, int right) {
        return query(0, 0, n - 1, left, right);
    }
};

]]></content>
	<!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
	<tabTrigger>_segmentTree</tabTrigger>
	<!-- Optional: Set a scope to limit where the snippet will trigger -->
	<!-- <scope>source.python</scope> -->
</snippet>
